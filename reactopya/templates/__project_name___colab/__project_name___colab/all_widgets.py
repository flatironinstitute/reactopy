####################################################################
## This file is automatically generated
## Do not edit manually
####################################################################

import IPython
import json
import simplejson
import uuid
import base64
import os

{% for widget in widgets -%}
from .widgets import {{ widget.componentName }} as {{ widget.componentName }}Orig
{% endfor %}

def _json_parse(x):
    try:
        return json.loads(x)
    except:
        return None

def _json_stringify(x):
    try:
        return simplejson.dumps(x, ignore_nan=True)
    except:
        return ''

{% for widget in widgets %}
class {{ widget.componentName }}:
    """Colab widget for {{ widget.componentName }}"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = {{ widget.componentName }}Orig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self, state):
        js_code = '''
        let json = atob('[python_state_json_b64]');
        let state = JSON.parse(json);
        window.reactopya_colab_widget_models['[model_id]'].setPythonState(state);
        '''
        python_state_json_b64 = base64.b64encode(simplejson.dumps(state, ignore_nan=True).encode('utf-8')).decode()
        js_code = js_code.replace('[model_id]', self._model_id)
        js_code = js_code.replace('[python_state_json_b64]', python_state_json_b64)
        display(IPython.display.Javascript(js_code))

    def _handle_callback(self, command, *, state=None):
        if command == 'handleJavaScriptStateChanged':
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onJavaScriptStateChanged(state) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['handleJavaScriptStateChanged'], {state: state});
                }
                let model = window.reactopya_colab.widgets.{{ widget.componentName }}.render(props0, onJavaScriptStateChanged);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props, ignore_nan=True))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))

{% endfor %}
